"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Workflow API for Cloud Foundry
 * This API uses the SAP Cloud Platform Workflow service. With the API, you can, for example, start new workflow instances and work with tasks.  Note (relevant only for SAP API Business Hub): For authentication purposes, the API uses OAuth 2.0 security (with JSON Web Token, JWT). Thus, \"Try Out\" only works with an explicitly configured environment. For more information on how to obtain the necessary parameters, please see [Determine Service Configuration Parameters](https://help.sap.com/viewer/e157c391253b4ecd93647bf232d18a83/Cloud/en-US/abb1f66b2c3b4983b6b656654cfc3d2b.html) in the documentation. The OAuth client you use must have [extended scopes](https://help.sap.com/viewer/e157c391253b4ecd93647bf232d18a83/Cloud/en-US/baf2847f6d1c401a83ca3a1427b8ff84.html).  Note: These APIs are designed for loosely coupled clients. This means:  - If workflow service adds fields to responses, the API version number does not increase. Your client must ignore new fields. - The order of fields in responses and of entries in arrays may change. This applies unless the API provides an explicit means to specify the desired order.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserTaskInstancesApi = exports.UserTaskInstancesApiFactory = exports.UserTaskInstancesApiFp = exports.UserTaskInstancesApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var base_1 = require("../base");
/**
 * UserTaskInstancesApi - axios parameter creator
 * @export
 */
var UserTaskInstancesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Retrieves the user task instance with the specified task instance ID.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Scope: TASK_GET
         * @summary Retrieve task by ID
         * @param {string} taskInstanceId The ID of the user task instance which should be retrieved. The ID is 36 characters long.
         * @param {'attributes'} [$expand] You can request custom task attributes to become part of the task output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into task output. Note that labels as well as the order of the custom task attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstance: function (taskInstanceId, $expand, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, _a, localVarAccessTokenValue, _b, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            // verify required parameter 'taskInstanceId' is not null or undefined
                            if (taskInstanceId === null || taskInstanceId === undefined) {
                                throw new base_1.RequiredError('taskInstanceId', 'Required parameter taskInstanceId was null or undefined when calling getInstance.');
                            }
                            localVarPath = "/v1/task-instances/{taskInstanceId}"
                                .replace("{" + "taskInstanceId" + "}", encodeURIComponent(String(taskInstanceId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken("Oauth2_AuthorizationCode", [])];
                        case 1:
                            _a = _c.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _c.sent();
                            _c.label = 4;
                        case 4:
                            localVarAccessTokenValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                            _c.label = 5;
                        case 5:
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 10];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 7];
                            return [4 /*yield*/, configuration.accessToken("Oauth2_ClientCredentials", [])];
                        case 6:
                            _b = _c.sent();
                            return [3 /*break*/, 9];
                        case 7: return [4 /*yield*/, configuration.accessToken];
                        case 8:
                            _b = _c.sent();
                            _c.label = 9;
                        case 9:
                            localVarAccessTokenValue = _b;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                            _c.label = 10;
                        case 10:
                            if ($expand !== undefined) {
                                localVarQueryParameter['$expand'] = $expand;
                            }
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                query.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves user task instances by parameters. If no parameters are specified, all instances with status READY, RESERVED, CANCELED, or COMPLETED are returned. Parameters for different attributes of the instance are evaluated using the logical \'and\' operator. If a parameter is specified multiple times, results are matched using the logical \'or\' operator, unless noted otherwise. Empty parameters are treated as if they were not specified. By default, returned tasks are sorted by creation time in ascending order.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin   - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]   - Scope: TASK_GET
         * @summary Retrieve instances by query parameters
         * @param {number} [$skip] The number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. You can use this parameter only once. Refer also to the $top parameter.
         * @param {number} [$top] The number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. You can use this parameter only once. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the task instances, which match the search criteria, should be returned as a value  of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive. You can use this parameter only once.
         * @param {'attributes'} [$expand] You can request custom task attributes to become part of the task output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into task output. Note that labels as well as the order of the custom task attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present.
         * @param {'claimedAt asc' | 'claimedAt desc' | 'completedAt asc' | 'completedAt desc' | 'createdAt asc' | 'createdAt desc' | 'lastChangedAt asc' | 'lastChangedAt desc' | 'dueDate asc' | 'dueDate desc' | 'subject asc' | 'subject desc' | 'description asc' | 'description desc' | 'activityId asc' | 'activityId desc' | 'id asc' | 'id desc' | 'processor asc' | 'processor desc' | 'workflowDefinitionId asc' | 'workflowDefinitionId desc' | 'workflowInstanceId asc' | 'workflowInstanceId desc' | 'priority asc' | 'priority desc'} [$orderby] The attribute and direction by which tasks are sorted. The sort attribute and direction are separated by a space. The parameter value is case-sensitive. You can only specify one ordering parameter, which contains attribute and direction. To stabilize the order of tasks the implicit second ordering parameter \&#39;createdAt asc\&#39; is applied.   * claimedAt asc - Ascending, task claim time from the oldest to the most recent, tasks with status READY (not yet claimed) first.  * claimedAt desc - Descending, from the most recently claimed tasks to the oldest ones, tasks with status READY (not yet claimed) last.  * completedAt asc - Ascending, task completion or cancelation time from the oldest to the most recent, not yet COMPLETED tasks first.  * completedAt desc - Descending, from the most recently COMPLETED or CANCELED tasks to the oldest ones, not yet COMPLETED tasks last.  * createdAt asc - Ascending, task creation time from the oldest to the most recent.  * createdAt desc - Descending, from the most recently created tasks to the oldest ones.  * lastChangedAt asc - Ascending, task last change time from the oldest to the most recent.  * lastChangedAt desc - Descending, from the most recently changed tasks to the oldest ones.               * dueDate asc - Ascending, tasks due date from the oldest to the most distant in future ones, tasks without due date first.  * dueDate desc - Descending, tasks due date from the most distant in future to the oldest ones, tasks without due date last.  * subject asc - Ascending, from A to Z case-sensitive.  * subject desc - Descending, from Z to A case-sensitive.  * description asc - Ascending, from A to Z case-sensitive, tasks without description first.  * description desc - Descending, from Z to A case-sensitive, tasks without description last.  * activityId asc - Ascending, from A to Z case-sensitive.  * activityId desc - Descending, from Z to A case-sensitive.  * id asc - Ascending, from A to Z case-sensitive.  * id desc - Descending, from Z to A case-sensitive.  * processor asc - Ascending, from A to Z case-sensitive, tasks without processor first.  * processor desc - Descending, from Z to A case-sensitive, tasks without processor last.  * workflowDefinitionId asc - Ascending, from A to Z case-sensitive.  * workflowDefinitionId desc - Descending, from Z to A case-sensitive.  * workflowInstanceId asc - Ascending, from A to Z case-sensitive.  * workflowInstanceId desc - Descending, from Z to A case-sensitive.  * priority asc - Ascending, tasks priority from lowest to highest.  * priority desc - Descending, tasks priority from highest to lowest.
         * @param {string} [workflowInstanceId] The workflow instance ID for which the user task instances are returned. The workflow instance ID is 36 characters long.
         * @param {string} [workflowDefinitionId] The workflow definition ID for which the user task instances are returned.
         * @param {string} [processor] The processor of the user task instance.
         * @param {string} [id] The unique ID of the user task instance. The user task instance ID is 36 characters long.
         * @param {string} [activityId] The activityId of the user task instance. This field represents the ID of the user task definition.
         * @param {string} [description] The description of the user task instance in UTF-8 encoding. You must not specify texts that contain commas with this parameter.
         * @param {string} [subject] The subject of the user task instance in UTF-8 encoding. You must not specify texts that contain commas with this parameter.
         * @param {string} [createdAt] Time when the user task instance has been created. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;createdFrom\&#39; and \&#39;createdUpTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [createdFrom] The start time (inclusive) of the time range when the user task instance was created. Must be less or equal to the value of the \&#39;createdUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;createdAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [createdUpTo] The end time (inclusive) of the time range when the user task instance was created. Must be greater or equal to the value of the \&#39;createdFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;createdAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [claimedAt] Time when the user task instance was claimed. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;claimedFrom\&#39; and \&#39;claimedUpTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [claimedFrom] The start time (inclusive) of the time range when the user task instance was claimed. Must be less or equal to the value of the \&#39;claimedUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;claimedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [claimedUpTo] The end time (inclusive) of the time range when the user task instance was claimed. Must be greater or equal to the value of the \&#39;claimedFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;claimedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [completedAt] Time when the user task instance was COMPLETED or CANCELED. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;completedFrom\&#39; and \&#39;completedUpTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [completedFrom] The start time (inclusive) of the time range when the user task instance was COMPLETED or CANCELED. Must be less or equal to the value of the \&#39;completedUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;completedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [completedUpTo] The end time (inclusive) of the time range when the user task instance was COMPLETED or CANCELED. Must be greater or equal to the value of the \&#39;completedFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;completedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [lastChangedAt] Time when the user task instance has been changed for the last time. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;lastChangedFrom\&#39; and \&#39;lastChangedTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [lastChangedFrom] The start time (inclusive) of the time range when the user task instance was changed for the last time. Must be less or equal to the value of the \&#39;lastChangedUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;lastChangedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [lastChangedUpTo] The end time (inclusive) of the time range when the user task instance was changed for the last time. Must be greater or equal to the value of the \&#39;lastChangedFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;lastChangedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [dueDate] The due date of the user task instance. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;dueDateFrom\&#39; and \&#39;dueDateUpTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [dueDateFrom] The start time (inclusive) of the due date time range for the user task instance. Must be less or equal to the value of the \&#39;dueDateUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;dueDate\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [dueDateUpTo] The end time (inclusive) of the due date time range for the user task instance. Must be greater or equal to the \&#39;dueDateFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;dueDate\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {'LOW' | 'MEDIUM' | 'HIGH' | 'VERY_HIGH'} [priority] The priority of the user task instance. The values are case-insensitive.
         * @param {'READY' | 'RESERVED' | 'COMPLETED' | 'CANCELED'} [status] The status of the user task instance. The values are case-insensitive.
         * @param {string} [recipientUsers] The users who must be among the recipient users of the user task instance. A user task instance has to match at least one of the recipient users specified. Specify the users by repeating this parameter multiple times, with one user each.
         * @param {string} [recipientGroups] The groups which must be among the recipient groups of the user task instance. A user task instance has to match at least one of the recipient groups specified. Specify the groups by repeating this parameter multiple times, with one user each.
         * @param {string} [containsText] Text, which should be contained in at least one of the following fields of the user task instance:   * subject  * description  * activityId  * id  * processor  * workflowDefinitionId  * workflowInstanceId  Performed filtering is case-insensitive. You must not use this parameter more than once.
         * @param {string} [attributesExampleCustomAttribute] Example of a parameter that filters task instances by the value of the custom task attribute with the ID \&#39;ExampleCustomAttribute\&#39;. You can specify parameters for other attributes in an analogous way. If you specify a parameter several times, the logical operators apply as outlined in the overall description of this API. If custom task attributes with different IDs are present in the URL, only tasks which contain all of them with the values specified will be returned as a response to the request. If a query by custom task attributes matches too many task definitions, you have to limit the query further. Refer, for example, to parameter \&#39;definitionId\&#39;.
         * @param {string} [definitionId] The definition ID of the user task. It consists of the ID of the task defined in the workflow definition (task definition ID) as well as the workflow definition ID delimited by an \&#39;@\&#39; sign. For optimal performance, specify this parameter when searching for tasks by custom task attributes. If the custom task attribute IDs from the query match more than 50 task definitions, you have to specify one or more task definition IDs when searching for tasks by custom task attributes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1TaskInstances: function ($skip, $top, $inlinecount, $expand, $orderby, workflowInstanceId, workflowDefinitionId, processor, id, activityId, description, subject, createdAt, createdFrom, createdUpTo, claimedAt, claimedFrom, claimedUpTo, completedAt, completedFrom, completedUpTo, lastChangedAt, lastChangedFrom, lastChangedUpTo, dueDate, dueDateFrom, dueDateUpTo, priority, status, recipientUsers, recipientGroups, containsText, attributesExampleCustomAttribute, definitionId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, _a, localVarAccessTokenValue, _b, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            localVarPath = "/v1/task-instances";
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken("Oauth2_AuthorizationCode", [])];
                        case 1:
                            _a = _c.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _c.sent();
                            _c.label = 4;
                        case 4:
                            localVarAccessTokenValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                            _c.label = 5;
                        case 5:
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 10];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 7];
                            return [4 /*yield*/, configuration.accessToken("Oauth2_ClientCredentials", [])];
                        case 6:
                            _b = _c.sent();
                            return [3 /*break*/, 9];
                        case 7: return [4 /*yield*/, configuration.accessToken];
                        case 8:
                            _b = _c.sent();
                            _c.label = 9;
                        case 9:
                            localVarAccessTokenValue = _b;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                            _c.label = 10;
                        case 10:
                            if ($skip !== undefined) {
                                localVarQueryParameter['$skip'] = $skip;
                            }
                            if ($top !== undefined) {
                                localVarQueryParameter['$top'] = $top;
                            }
                            if ($inlinecount !== undefined) {
                                localVarQueryParameter['$inlinecount'] = $inlinecount;
                            }
                            if ($expand !== undefined) {
                                localVarQueryParameter['$expand'] = $expand;
                            }
                            if ($orderby !== undefined) {
                                localVarQueryParameter['$orderby'] = $orderby;
                            }
                            if (workflowInstanceId !== undefined) {
                                localVarQueryParameter['workflowInstanceId'] = workflowInstanceId;
                            }
                            if (workflowDefinitionId !== undefined) {
                                localVarQueryParameter['workflowDefinitionId'] = workflowDefinitionId;
                            }
                            if (processor !== undefined) {
                                localVarQueryParameter['processor'] = processor;
                            }
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (activityId !== undefined) {
                                localVarQueryParameter['activityId'] = activityId;
                            }
                            if (description !== undefined) {
                                localVarQueryParameter['description'] = description;
                            }
                            if (subject !== undefined) {
                                localVarQueryParameter['subject'] = subject;
                            }
                            if (createdAt !== undefined) {
                                localVarQueryParameter['createdAt'] = createdAt;
                            }
                            if (createdFrom !== undefined) {
                                localVarQueryParameter['createdFrom'] = createdFrom;
                            }
                            if (createdUpTo !== undefined) {
                                localVarQueryParameter['createdUpTo'] = createdUpTo;
                            }
                            if (claimedAt !== undefined) {
                                localVarQueryParameter['claimedAt'] = claimedAt;
                            }
                            if (claimedFrom !== undefined) {
                                localVarQueryParameter['claimedFrom'] = claimedFrom;
                            }
                            if (claimedUpTo !== undefined) {
                                localVarQueryParameter['claimedUpTo'] = claimedUpTo;
                            }
                            if (completedAt !== undefined) {
                                localVarQueryParameter['completedAt'] = completedAt;
                            }
                            if (completedFrom !== undefined) {
                                localVarQueryParameter['completedFrom'] = completedFrom;
                            }
                            if (completedUpTo !== undefined) {
                                localVarQueryParameter['completedUpTo'] = completedUpTo;
                            }
                            if (lastChangedAt !== undefined) {
                                localVarQueryParameter['lastChangedAt'] = lastChangedAt;
                            }
                            if (lastChangedFrom !== undefined) {
                                localVarQueryParameter['lastChangedFrom'] = lastChangedFrom;
                            }
                            if (lastChangedUpTo !== undefined) {
                                localVarQueryParameter['lastChangedUpTo'] = lastChangedUpTo;
                            }
                            if (dueDate !== undefined) {
                                localVarQueryParameter['dueDate'] = dueDate;
                            }
                            if (dueDateFrom !== undefined) {
                                localVarQueryParameter['dueDateFrom'] = dueDateFrom;
                            }
                            if (dueDateUpTo !== undefined) {
                                localVarQueryParameter['dueDateUpTo'] = dueDateUpTo;
                            }
                            if (priority !== undefined) {
                                localVarQueryParameter['priority'] = priority;
                            }
                            if (status !== undefined) {
                                localVarQueryParameter['status'] = status;
                            }
                            if (recipientUsers !== undefined) {
                                localVarQueryParameter['recipientUsers'] = recipientUsers;
                            }
                            if (recipientGroups !== undefined) {
                                localVarQueryParameter['recipientGroups'] = recipientGroups;
                            }
                            if (containsText !== undefined) {
                                localVarQueryParameter['containsText'] = containsText;
                            }
                            if (attributesExampleCustomAttribute !== undefined) {
                                localVarQueryParameter['attributes.ExampleCustomAttribute'] = attributesExampleCustomAttribute;
                            }
                            if (definitionId !== undefined) {
                                localVarQueryParameter['definitionId'] = definitionId;
                            }
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                query.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves the attachments information of a workflow instance via the given user task.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: TASK_GET_ATTACHMENTS
         * @summary Retrieve task instance attachments
         * @param {string} taskInstanceId The ID of the user task via which the attachments information of the corresponding workflow instance should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1TaskInstancesAttachmentsByTaskInstanceId: function (taskInstanceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, _a, localVarAccessTokenValue, _b, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            // verify required parameter 'taskInstanceId' is not null or undefined
                            if (taskInstanceId === null || taskInstanceId === undefined) {
                                throw new base_1.RequiredError('taskInstanceId', 'Required parameter taskInstanceId was null or undefined when calling getV1TaskInstancesAttachmentsByTaskInstanceId.');
                            }
                            localVarPath = "/v1/task-instances/{taskInstanceId}/attachments"
                                .replace("{" + "taskInstanceId" + "}", encodeURIComponent(String(taskInstanceId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken("Oauth2_AuthorizationCode", [])];
                        case 1:
                            _a = _c.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _c.sent();
                            _c.label = 4;
                        case 4:
                            localVarAccessTokenValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                            _c.label = 5;
                        case 5:
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 10];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 7];
                            return [4 /*yield*/, configuration.accessToken("Oauth2_ClientCredentials", [])];
                        case 6:
                            _b = _c.sent();
                            return [3 /*break*/, 9];
                        case 7: return [4 /*yield*/, configuration.accessToken];
                        case 8:
                            _b = _c.sent();
                            _c.label = 9;
                        case 9:
                            localVarAccessTokenValue = _b;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                            _c.label = 10;
                        case 10:
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                query.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves custom task attributes of a user task. Labels as well as the order of the custom task attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Scope: TASK_GET_ATTRIBUTES
         * @summary Retrieve custom task attributes by task instance ID
         * @param {string} taskInstanceId The ID of the user task instance for which the custom task attributes should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1TaskInstancesAttributesByTaskInstanceId: function (taskInstanceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, _a, localVarAccessTokenValue, _b, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            // verify required parameter 'taskInstanceId' is not null or undefined
                            if (taskInstanceId === null || taskInstanceId === undefined) {
                                throw new base_1.RequiredError('taskInstanceId', 'Required parameter taskInstanceId was null or undefined when calling getV1TaskInstancesAttributesByTaskInstanceId.');
                            }
                            localVarPath = "/v1/task-instances/{taskInstanceId}/attributes"
                                .replace("{" + "taskInstanceId" + "}", encodeURIComponent(String(taskInstanceId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken("Oauth2_AuthorizationCode", [])];
                        case 1:
                            _a = _c.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _c.sent();
                            _c.label = 4;
                        case 4:
                            localVarAccessTokenValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                            _c.label = 5;
                        case 5:
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 10];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 7];
                            return [4 /*yield*/, configuration.accessToken("Oauth2_ClientCredentials", [])];
                        case 6:
                            _b = _c.sent();
                            return [3 /*break*/, 9];
                        case 7: return [4 /*yield*/, configuration.accessToken];
                        case 8:
                            _b = _c.sent();
                            _c.label = 9;
                        case 9:
                            localVarAccessTokenValue = _b;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                            _c.label = 10;
                        case 10:
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                query.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * **Warning: Users with the role \"WorkflowAdmin\" are no longer able to view the task context. To allow these users to continue to view the context, assign the role \"WorkflowContextViewer\" to them.**  Retrieves the context of a user task.  Roles permitted to execute this operation:   - Global roles: WorkflowContextViewer, WorkflowContextAdmin  - Instance-specific roles: contextViewerUsers, contextViewerGroups, contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: TASK_GET_CONTEXT
         * @summary Retrieve task context by ID
         * @param {string} taskInstanceId The ID of the user task for which the context should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1TaskInstancesContextByTaskInstanceId: function (taskInstanceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, _a, localVarAccessTokenValue, _b, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            // verify required parameter 'taskInstanceId' is not null or undefined
                            if (taskInstanceId === null || taskInstanceId === undefined) {
                                throw new base_1.RequiredError('taskInstanceId', 'Required parameter taskInstanceId was null or undefined when calling getV1TaskInstancesContextByTaskInstanceId.');
                            }
                            localVarPath = "/v1/task-instances/{taskInstanceId}/context"
                                .replace("{" + "taskInstanceId" + "}", encodeURIComponent(String(taskInstanceId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken("Oauth2_AuthorizationCode", [])];
                        case 1:
                            _a = _c.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _c.sent();
                            _c.label = 4;
                        case 4:
                            localVarAccessTokenValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                            _c.label = 5;
                        case 5:
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 10];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 7];
                            return [4 /*yield*/, configuration.accessToken("Oauth2_ClientCredentials", [])];
                        case 6:
                            _b = _c.sent();
                            return [3 /*break*/, 9];
                        case 7: return [4 /*yield*/, configuration.accessToken];
                        case 8:
                            _b = _c.sent();
                            _c.label = 9;
                        case 9:
                            localVarAccessTokenValue = _b;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                            _c.label = 10;
                        case 10:
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                query.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves the form metadata of the given task instance.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin   - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]   - Scope: TASK_GET_FORM
         * @summary Retrieve form metadata of the given task instance.
         * @param {string} taskInstanceId The ID of the user task instance for which the form metadata should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1TaskInstancesFormByTaskInstanceId: function (taskInstanceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, _a, localVarAccessTokenValue, _b, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            // verify required parameter 'taskInstanceId' is not null or undefined
                            if (taskInstanceId === null || taskInstanceId === undefined) {
                                throw new base_1.RequiredError('taskInstanceId', 'Required parameter taskInstanceId was null or undefined when calling getV1TaskInstancesFormByTaskInstanceId.');
                            }
                            localVarPath = "/v1/task-instances/{taskInstanceId}/form"
                                .replace("{" + "taskInstanceId" + "}", encodeURIComponent(String(taskInstanceId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken("Oauth2_AuthorizationCode", [])];
                        case 1:
                            _a = _c.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _c.sent();
                            _c.label = 4;
                        case 4:
                            localVarAccessTokenValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                            _c.label = 5;
                        case 5:
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 10];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 7];
                            return [4 /*yield*/, configuration.accessToken("Oauth2_ClientCredentials", [])];
                        case 6:
                            _b = _c.sent();
                            return [3 /*break*/, 9];
                        case 7: return [4 /*yield*/, configuration.accessToken];
                        case 8:
                            _b = _c.sent();
                            _c.label = 9;
                        case 9:
                            localVarAccessTokenValue = _b;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                            _c.label = 10;
                        case 10:
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                query.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves the form model of the given task instance.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin   - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]   - Scope: TASK_GET_FORM_MODEL
         * @summary Retrieve form model of the given task instance.
         * @param {string} taskInstanceId The ID of the user task instance for which the form model should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1TaskInstancesFormModelByTaskInstanceId: function (taskInstanceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, _a, localVarAccessTokenValue, _b, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            // verify required parameter 'taskInstanceId' is not null or undefined
                            if (taskInstanceId === null || taskInstanceId === undefined) {
                                throw new base_1.RequiredError('taskInstanceId', 'Required parameter taskInstanceId was null or undefined when calling getV1TaskInstancesFormModelByTaskInstanceId.');
                            }
                            localVarPath = "/v1/task-instances/{taskInstanceId}/form/model"
                                .replace("{" + "taskInstanceId" + "}", encodeURIComponent(String(taskInstanceId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken("Oauth2_AuthorizationCode", [])];
                        case 1:
                            _a = _c.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _c.sent();
                            _c.label = 4;
                        case 4:
                            localVarAccessTokenValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                            _c.label = 5;
                        case 5:
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 10];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 7];
                            return [4 /*yield*/, configuration.accessToken("Oauth2_ClientCredentials", [])];
                        case 6:
                            _b = _c.sent();
                            return [3 /*break*/, 9];
                        case 7: return [4 /*yield*/, configuration.accessToken];
                        case 8:
                            _b = _c.sent();
                            _c.label = 9;
                        case 9:
                            localVarAccessTokenValue = _b;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                            _c.label = 10;
                        case 10:
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                query.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Updates a user task\'s status, its properties (for example, subject), and its context with the attributes provided in the request body.    For more information, see SAP Cloud Platform Workflow Service documentation on the  [SAP Help Portal](https://help.sap.com/viewer/e157c391253b4ecd93647bf232d18a83/Cloud/en-US/fe41c54d61fa4710b34f2afe11b5d00e.html).  Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scopes: TASK_COMPLETE, TASK_UPDATE
         * @summary Update task by ID
         * @param {string} taskInstanceId The ID of the user task instance that is to be updated. The ID is 36 characters long.
         * @param {UpdateTaskInstancePayload} updateTaskInstancePayload Specify the request body according to the given schema. The length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateV1TaskInstancesByTaskInstanceId: function (taskInstanceId, updateTaskInstancePayload, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarAccessTokenValue, _a, localVarAccessTokenValue, _b, query, key, key, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            // verify required parameter 'taskInstanceId' is not null or undefined
                            if (taskInstanceId === null || taskInstanceId === undefined) {
                                throw new base_1.RequiredError('taskInstanceId', 'Required parameter taskInstanceId was null or undefined when calling updateV1TaskInstancesByTaskInstanceId.');
                            }
                            // verify required parameter 'updateTaskInstancePayload' is not null or undefined
                            if (updateTaskInstancePayload === null || updateTaskInstancePayload === undefined) {
                                throw new base_1.RequiredError('updateTaskInstancePayload', 'Required parameter updateTaskInstancePayload was null or undefined when calling updateV1TaskInstancesByTaskInstanceId.');
                            }
                            localVarPath = "/v1/task-instances/{taskInstanceId}"
                                .replace("{" + "taskInstanceId" + "}", encodeURIComponent(String(taskInstanceId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken("Oauth2_AuthorizationCode", [])];
                        case 1:
                            _a = _c.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _c.sent();
                            _c.label = 4;
                        case 4:
                            localVarAccessTokenValue = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                            _c.label = 5;
                        case 5:
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 10];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 7];
                            return [4 /*yield*/, configuration.accessToken("Oauth2_ClientCredentials", [])];
                        case 6:
                            _b = _c.sent();
                            return [3 /*break*/, 9];
                        case 7: return [4 /*yield*/, configuration.accessToken];
                        case 8:
                            _b = _c.sent();
                            _c.label = 9;
                        case 9:
                            localVarAccessTokenValue = _b;
                            localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
                            _c.label = 10;
                        case 10:
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.query) {
                                query.set(key, options.query[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            needsSerialization = (typeof updateTaskInstancePayload !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                            localVarRequestOptions.data = needsSerialization ? JSON.stringify(updateTaskInstancePayload !== undefined ? updateTaskInstancePayload : {}) : (updateTaskInstancePayload || "");
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.UserTaskInstancesApiAxiosParamCreator = UserTaskInstancesApiAxiosParamCreator;
/**
 * UserTaskInstancesApi - functional programming interface
 * @export
 */
var UserTaskInstancesApiFp = function (configuration) {
    return {
        /**
         * Retrieves the user task instance with the specified task instance ID.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Scope: TASK_GET
         * @summary Retrieve task by ID
         * @param {string} taskInstanceId The ID of the user task instance which should be retrieved. The ID is 36 characters long.
         * @param {'attributes'} [$expand] You can request custom task attributes to become part of the task output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into task output. Note that labels as well as the order of the custom task attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstance: function (taskInstanceId, $expand, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.UserTaskInstancesApiAxiosParamCreator(configuration).getInstance(taskInstanceId, $expand, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves user task instances by parameters. If no parameters are specified, all instances with status READY, RESERVED, CANCELED, or COMPLETED are returned. Parameters for different attributes of the instance are evaluated using the logical \'and\' operator. If a parameter is specified multiple times, results are matched using the logical \'or\' operator, unless noted otherwise. Empty parameters are treated as if they were not specified. By default, returned tasks are sorted by creation time in ascending order.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin   - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]   - Scope: TASK_GET
         * @summary Retrieve instances by query parameters
         * @param {number} [$skip] The number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. You can use this parameter only once. Refer also to the $top parameter.
         * @param {number} [$top] The number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. You can use this parameter only once. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the task instances, which match the search criteria, should be returned as a value  of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive. You can use this parameter only once.
         * @param {'attributes'} [$expand] You can request custom task attributes to become part of the task output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into task output. Note that labels as well as the order of the custom task attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present.
         * @param {'claimedAt asc' | 'claimedAt desc' | 'completedAt asc' | 'completedAt desc' | 'createdAt asc' | 'createdAt desc' | 'lastChangedAt asc' | 'lastChangedAt desc' | 'dueDate asc' | 'dueDate desc' | 'subject asc' | 'subject desc' | 'description asc' | 'description desc' | 'activityId asc' | 'activityId desc' | 'id asc' | 'id desc' | 'processor asc' | 'processor desc' | 'workflowDefinitionId asc' | 'workflowDefinitionId desc' | 'workflowInstanceId asc' | 'workflowInstanceId desc' | 'priority asc' | 'priority desc'} [$orderby] The attribute and direction by which tasks are sorted. The sort attribute and direction are separated by a space. The parameter value is case-sensitive. You can only specify one ordering parameter, which contains attribute and direction. To stabilize the order of tasks the implicit second ordering parameter \&#39;createdAt asc\&#39; is applied.   * claimedAt asc - Ascending, task claim time from the oldest to the most recent, tasks with status READY (not yet claimed) first.  * claimedAt desc - Descending, from the most recently claimed tasks to the oldest ones, tasks with status READY (not yet claimed) last.  * completedAt asc - Ascending, task completion or cancelation time from the oldest to the most recent, not yet COMPLETED tasks first.  * completedAt desc - Descending, from the most recently COMPLETED or CANCELED tasks to the oldest ones, not yet COMPLETED tasks last.  * createdAt asc - Ascending, task creation time from the oldest to the most recent.  * createdAt desc - Descending, from the most recently created tasks to the oldest ones.  * lastChangedAt asc - Ascending, task last change time from the oldest to the most recent.  * lastChangedAt desc - Descending, from the most recently changed tasks to the oldest ones.               * dueDate asc - Ascending, tasks due date from the oldest to the most distant in future ones, tasks without due date first.  * dueDate desc - Descending, tasks due date from the most distant in future to the oldest ones, tasks without due date last.  * subject asc - Ascending, from A to Z case-sensitive.  * subject desc - Descending, from Z to A case-sensitive.  * description asc - Ascending, from A to Z case-sensitive, tasks without description first.  * description desc - Descending, from Z to A case-sensitive, tasks without description last.  * activityId asc - Ascending, from A to Z case-sensitive.  * activityId desc - Descending, from Z to A case-sensitive.  * id asc - Ascending, from A to Z case-sensitive.  * id desc - Descending, from Z to A case-sensitive.  * processor asc - Ascending, from A to Z case-sensitive, tasks without processor first.  * processor desc - Descending, from Z to A case-sensitive, tasks without processor last.  * workflowDefinitionId asc - Ascending, from A to Z case-sensitive.  * workflowDefinitionId desc - Descending, from Z to A case-sensitive.  * workflowInstanceId asc - Ascending, from A to Z case-sensitive.  * workflowInstanceId desc - Descending, from Z to A case-sensitive.  * priority asc - Ascending, tasks priority from lowest to highest.  * priority desc - Descending, tasks priority from highest to lowest.
         * @param {string} [workflowInstanceId] The workflow instance ID for which the user task instances are returned. The workflow instance ID is 36 characters long.
         * @param {string} [workflowDefinitionId] The workflow definition ID for which the user task instances are returned.
         * @param {string} [processor] The processor of the user task instance.
         * @param {string} [id] The unique ID of the user task instance. The user task instance ID is 36 characters long.
         * @param {string} [activityId] The activityId of the user task instance. This field represents the ID of the user task definition.
         * @param {string} [description] The description of the user task instance in UTF-8 encoding. You must not specify texts that contain commas with this parameter.
         * @param {string} [subject] The subject of the user task instance in UTF-8 encoding. You must not specify texts that contain commas with this parameter.
         * @param {string} [createdAt] Time when the user task instance has been created. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;createdFrom\&#39; and \&#39;createdUpTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [createdFrom] The start time (inclusive) of the time range when the user task instance was created. Must be less or equal to the value of the \&#39;createdUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;createdAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [createdUpTo] The end time (inclusive) of the time range when the user task instance was created. Must be greater or equal to the value of the \&#39;createdFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;createdAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [claimedAt] Time when the user task instance was claimed. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;claimedFrom\&#39; and \&#39;claimedUpTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [claimedFrom] The start time (inclusive) of the time range when the user task instance was claimed. Must be less or equal to the value of the \&#39;claimedUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;claimedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [claimedUpTo] The end time (inclusive) of the time range when the user task instance was claimed. Must be greater or equal to the value of the \&#39;claimedFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;claimedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [completedAt] Time when the user task instance was COMPLETED or CANCELED. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;completedFrom\&#39; and \&#39;completedUpTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [completedFrom] The start time (inclusive) of the time range when the user task instance was COMPLETED or CANCELED. Must be less or equal to the value of the \&#39;completedUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;completedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [completedUpTo] The end time (inclusive) of the time range when the user task instance was COMPLETED or CANCELED. Must be greater or equal to the value of the \&#39;completedFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;completedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [lastChangedAt] Time when the user task instance has been changed for the last time. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;lastChangedFrom\&#39; and \&#39;lastChangedTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [lastChangedFrom] The start time (inclusive) of the time range when the user task instance was changed for the last time. Must be less or equal to the value of the \&#39;lastChangedUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;lastChangedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [lastChangedUpTo] The end time (inclusive) of the time range when the user task instance was changed for the last time. Must be greater or equal to the value of the \&#39;lastChangedFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;lastChangedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [dueDate] The due date of the user task instance. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;dueDateFrom\&#39; and \&#39;dueDateUpTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [dueDateFrom] The start time (inclusive) of the due date time range for the user task instance. Must be less or equal to the value of the \&#39;dueDateUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;dueDate\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [dueDateUpTo] The end time (inclusive) of the due date time range for the user task instance. Must be greater or equal to the \&#39;dueDateFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;dueDate\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {'LOW' | 'MEDIUM' | 'HIGH' | 'VERY_HIGH'} [priority] The priority of the user task instance. The values are case-insensitive.
         * @param {'READY' | 'RESERVED' | 'COMPLETED' | 'CANCELED'} [status] The status of the user task instance. The values are case-insensitive.
         * @param {string} [recipientUsers] The users who must be among the recipient users of the user task instance. A user task instance has to match at least one of the recipient users specified. Specify the users by repeating this parameter multiple times, with one user each.
         * @param {string} [recipientGroups] The groups which must be among the recipient groups of the user task instance. A user task instance has to match at least one of the recipient groups specified. Specify the groups by repeating this parameter multiple times, with one user each.
         * @param {string} [containsText] Text, which should be contained in at least one of the following fields of the user task instance:   * subject  * description  * activityId  * id  * processor  * workflowDefinitionId  * workflowInstanceId  Performed filtering is case-insensitive. You must not use this parameter more than once.
         * @param {string} [attributesExampleCustomAttribute] Example of a parameter that filters task instances by the value of the custom task attribute with the ID \&#39;ExampleCustomAttribute\&#39;. You can specify parameters for other attributes in an analogous way. If you specify a parameter several times, the logical operators apply as outlined in the overall description of this API. If custom task attributes with different IDs are present in the URL, only tasks which contain all of them with the values specified will be returned as a response to the request. If a query by custom task attributes matches too many task definitions, you have to limit the query further. Refer, for example, to parameter \&#39;definitionId\&#39;.
         * @param {string} [definitionId] The definition ID of the user task. It consists of the ID of the task defined in the workflow definition (task definition ID) as well as the workflow definition ID delimited by an \&#39;@\&#39; sign. For optimal performance, specify this parameter when searching for tasks by custom task attributes. If the custom task attribute IDs from the query match more than 50 task definitions, you have to specify one or more task definition IDs when searching for tasks by custom task attributes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1TaskInstances: function ($skip, $top, $inlinecount, $expand, $orderby, workflowInstanceId, workflowDefinitionId, processor, id, activityId, description, subject, createdAt, createdFrom, createdUpTo, claimedAt, claimedFrom, claimedUpTo, completedAt, completedFrom, completedUpTo, lastChangedAt, lastChangedFrom, lastChangedUpTo, dueDate, dueDateFrom, dueDateUpTo, priority, status, recipientUsers, recipientGroups, containsText, attributesExampleCustomAttribute, definitionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.UserTaskInstancesApiAxiosParamCreator(configuration).getV1TaskInstances($skip, $top, $inlinecount, $expand, $orderby, workflowInstanceId, workflowDefinitionId, processor, id, activityId, description, subject, createdAt, createdFrom, createdUpTo, claimedAt, claimedFrom, claimedUpTo, completedAt, completedFrom, completedUpTo, lastChangedAt, lastChangedFrom, lastChangedUpTo, dueDate, dueDateFrom, dueDateUpTo, priority, status, recipientUsers, recipientGroups, containsText, attributesExampleCustomAttribute, definitionId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves the attachments information of a workflow instance via the given user task.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: TASK_GET_ATTACHMENTS
         * @summary Retrieve task instance attachments
         * @param {string} taskInstanceId The ID of the user task via which the attachments information of the corresponding workflow instance should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1TaskInstancesAttachmentsByTaskInstanceId: function (taskInstanceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.UserTaskInstancesApiAxiosParamCreator(configuration).getV1TaskInstancesAttachmentsByTaskInstanceId(taskInstanceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves custom task attributes of a user task. Labels as well as the order of the custom task attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Scope: TASK_GET_ATTRIBUTES
         * @summary Retrieve custom task attributes by task instance ID
         * @param {string} taskInstanceId The ID of the user task instance for which the custom task attributes should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1TaskInstancesAttributesByTaskInstanceId: function (taskInstanceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.UserTaskInstancesApiAxiosParamCreator(configuration).getV1TaskInstancesAttributesByTaskInstanceId(taskInstanceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * **Warning: Users with the role \"WorkflowAdmin\" are no longer able to view the task context. To allow these users to continue to view the context, assign the role \"WorkflowContextViewer\" to them.**  Retrieves the context of a user task.  Roles permitted to execute this operation:   - Global roles: WorkflowContextViewer, WorkflowContextAdmin  - Instance-specific roles: contextViewerUsers, contextViewerGroups, contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: TASK_GET_CONTEXT
         * @summary Retrieve task context by ID
         * @param {string} taskInstanceId The ID of the user task for which the context should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1TaskInstancesContextByTaskInstanceId: function (taskInstanceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.UserTaskInstancesApiAxiosParamCreator(configuration).getV1TaskInstancesContextByTaskInstanceId(taskInstanceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves the form metadata of the given task instance.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin   - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]   - Scope: TASK_GET_FORM
         * @summary Retrieve form metadata of the given task instance.
         * @param {string} taskInstanceId The ID of the user task instance for which the form metadata should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1TaskInstancesFormByTaskInstanceId: function (taskInstanceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.UserTaskInstancesApiAxiosParamCreator(configuration).getV1TaskInstancesFormByTaskInstanceId(taskInstanceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves the form model of the given task instance.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin   - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]   - Scope: TASK_GET_FORM_MODEL
         * @summary Retrieve form model of the given task instance.
         * @param {string} taskInstanceId The ID of the user task instance for which the form model should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1TaskInstancesFormModelByTaskInstanceId: function (taskInstanceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.UserTaskInstancesApiAxiosParamCreator(configuration).getV1TaskInstancesFormModelByTaskInstanceId(taskInstanceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Updates a user task\'s status, its properties (for example, subject), and its context with the attributes provided in the request body.    For more information, see SAP Cloud Platform Workflow Service documentation on the  [SAP Help Portal](https://help.sap.com/viewer/e157c391253b4ecd93647bf232d18a83/Cloud/en-US/fe41c54d61fa4710b34f2afe11b5d00e.html).  Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scopes: TASK_COMPLETE, TASK_UPDATE
         * @summary Update task by ID
         * @param {string} taskInstanceId The ID of the user task instance that is to be updated. The ID is 36 characters long.
         * @param {UpdateTaskInstancePayload} updateTaskInstancePayload Specify the request body according to the given schema. The length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateV1TaskInstancesByTaskInstanceId: function (taskInstanceId, updateTaskInstancePayload, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.UserTaskInstancesApiAxiosParamCreator(configuration).updateV1TaskInstancesByTaskInstanceId(taskInstanceId, updateTaskInstancePayload, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.UserTaskInstancesApiFp = UserTaskInstancesApiFp;
/**
 * UserTaskInstancesApi - factory interface
 * @export
 */
var UserTaskInstancesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Retrieves the user task instance with the specified task instance ID.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Scope: TASK_GET
         * @summary Retrieve task by ID
         * @param {string} taskInstanceId The ID of the user task instance which should be retrieved. The ID is 36 characters long.
         * @param {'attributes'} [$expand] You can request custom task attributes to become part of the task output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into task output. Note that labels as well as the order of the custom task attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstance: function (taskInstanceId, $expand, options) {
            return exports.UserTaskInstancesApiFp(configuration).getInstance(taskInstanceId, $expand, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves user task instances by parameters. If no parameters are specified, all instances with status READY, RESERVED, CANCELED, or COMPLETED are returned. Parameters for different attributes of the instance are evaluated using the logical \'and\' operator. If a parameter is specified multiple times, results are matched using the logical \'or\' operator, unless noted otherwise. Empty parameters are treated as if they were not specified. By default, returned tasks are sorted by creation time in ascending order.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin   - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]   - Scope: TASK_GET
         * @summary Retrieve instances by query parameters
         * @param {number} [$skip] The number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. You can use this parameter only once. Refer also to the $top parameter.
         * @param {number} [$top] The number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. You can use this parameter only once. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the task instances, which match the search criteria, should be returned as a value  of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive. You can use this parameter only once.
         * @param {'attributes'} [$expand] You can request custom task attributes to become part of the task output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into task output. Note that labels as well as the order of the custom task attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present.
         * @param {'claimedAt asc' | 'claimedAt desc' | 'completedAt asc' | 'completedAt desc' | 'createdAt asc' | 'createdAt desc' | 'lastChangedAt asc' | 'lastChangedAt desc' | 'dueDate asc' | 'dueDate desc' | 'subject asc' | 'subject desc' | 'description asc' | 'description desc' | 'activityId asc' | 'activityId desc' | 'id asc' | 'id desc' | 'processor asc' | 'processor desc' | 'workflowDefinitionId asc' | 'workflowDefinitionId desc' | 'workflowInstanceId asc' | 'workflowInstanceId desc' | 'priority asc' | 'priority desc'} [$orderby] The attribute and direction by which tasks are sorted. The sort attribute and direction are separated by a space. The parameter value is case-sensitive. You can only specify one ordering parameter, which contains attribute and direction. To stabilize the order of tasks the implicit second ordering parameter \&#39;createdAt asc\&#39; is applied.   * claimedAt asc - Ascending, task claim time from the oldest to the most recent, tasks with status READY (not yet claimed) first.  * claimedAt desc - Descending, from the most recently claimed tasks to the oldest ones, tasks with status READY (not yet claimed) last.  * completedAt asc - Ascending, task completion or cancelation time from the oldest to the most recent, not yet COMPLETED tasks first.  * completedAt desc - Descending, from the most recently COMPLETED or CANCELED tasks to the oldest ones, not yet COMPLETED tasks last.  * createdAt asc - Ascending, task creation time from the oldest to the most recent.  * createdAt desc - Descending, from the most recently created tasks to the oldest ones.  * lastChangedAt asc - Ascending, task last change time from the oldest to the most recent.  * lastChangedAt desc - Descending, from the most recently changed tasks to the oldest ones.               * dueDate asc - Ascending, tasks due date from the oldest to the most distant in future ones, tasks without due date first.  * dueDate desc - Descending, tasks due date from the most distant in future to the oldest ones, tasks without due date last.  * subject asc - Ascending, from A to Z case-sensitive.  * subject desc - Descending, from Z to A case-sensitive.  * description asc - Ascending, from A to Z case-sensitive, tasks without description first.  * description desc - Descending, from Z to A case-sensitive, tasks without description last.  * activityId asc - Ascending, from A to Z case-sensitive.  * activityId desc - Descending, from Z to A case-sensitive.  * id asc - Ascending, from A to Z case-sensitive.  * id desc - Descending, from Z to A case-sensitive.  * processor asc - Ascending, from A to Z case-sensitive, tasks without processor first.  * processor desc - Descending, from Z to A case-sensitive, tasks without processor last.  * workflowDefinitionId asc - Ascending, from A to Z case-sensitive.  * workflowDefinitionId desc - Descending, from Z to A case-sensitive.  * workflowInstanceId asc - Ascending, from A to Z case-sensitive.  * workflowInstanceId desc - Descending, from Z to A case-sensitive.  * priority asc - Ascending, tasks priority from lowest to highest.  * priority desc - Descending, tasks priority from highest to lowest.
         * @param {string} [workflowInstanceId] The workflow instance ID for which the user task instances are returned. The workflow instance ID is 36 characters long.
         * @param {string} [workflowDefinitionId] The workflow definition ID for which the user task instances are returned.
         * @param {string} [processor] The processor of the user task instance.
         * @param {string} [id] The unique ID of the user task instance. The user task instance ID is 36 characters long.
         * @param {string} [activityId] The activityId of the user task instance. This field represents the ID of the user task definition.
         * @param {string} [description] The description of the user task instance in UTF-8 encoding. You must not specify texts that contain commas with this parameter.
         * @param {string} [subject] The subject of the user task instance in UTF-8 encoding. You must not specify texts that contain commas with this parameter.
         * @param {string} [createdAt] Time when the user task instance has been created. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;createdFrom\&#39; and \&#39;createdUpTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [createdFrom] The start time (inclusive) of the time range when the user task instance was created. Must be less or equal to the value of the \&#39;createdUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;createdAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [createdUpTo] The end time (inclusive) of the time range when the user task instance was created. Must be greater or equal to the value of the \&#39;createdFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;createdAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [claimedAt] Time when the user task instance was claimed. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;claimedFrom\&#39; and \&#39;claimedUpTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [claimedFrom] The start time (inclusive) of the time range when the user task instance was claimed. Must be less or equal to the value of the \&#39;claimedUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;claimedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [claimedUpTo] The end time (inclusive) of the time range when the user task instance was claimed. Must be greater or equal to the value of the \&#39;claimedFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;claimedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [completedAt] Time when the user task instance was COMPLETED or CANCELED. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;completedFrom\&#39; and \&#39;completedUpTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [completedFrom] The start time (inclusive) of the time range when the user task instance was COMPLETED or CANCELED. Must be less or equal to the value of the \&#39;completedUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;completedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [completedUpTo] The end time (inclusive) of the time range when the user task instance was COMPLETED or CANCELED. Must be greater or equal to the value of the \&#39;completedFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;completedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [lastChangedAt] Time when the user task instance has been changed for the last time. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;lastChangedFrom\&#39; and \&#39;lastChangedTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [lastChangedFrom] The start time (inclusive) of the time range when the user task instance was changed for the last time. Must be less or equal to the value of the \&#39;lastChangedUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;lastChangedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [lastChangedUpTo] The end time (inclusive) of the time range when the user task instance was changed for the last time. Must be greater or equal to the value of the \&#39;lastChangedFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;lastChangedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [dueDate] The due date of the user task instance. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;dueDateFrom\&#39; and \&#39;dueDateUpTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [dueDateFrom] The start time (inclusive) of the due date time range for the user task instance. Must be less or equal to the value of the \&#39;dueDateUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;dueDate\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {string} [dueDateUpTo] The end time (inclusive) of the due date time range for the user task instance. Must be greater or equal to the \&#39;dueDateFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;dueDate\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
         * @param {'LOW' | 'MEDIUM' | 'HIGH' | 'VERY_HIGH'} [priority] The priority of the user task instance. The values are case-insensitive.
         * @param {'READY' | 'RESERVED' | 'COMPLETED' | 'CANCELED'} [status] The status of the user task instance. The values are case-insensitive.
         * @param {string} [recipientUsers] The users who must be among the recipient users of the user task instance. A user task instance has to match at least one of the recipient users specified. Specify the users by repeating this parameter multiple times, with one user each.
         * @param {string} [recipientGroups] The groups which must be among the recipient groups of the user task instance. A user task instance has to match at least one of the recipient groups specified. Specify the groups by repeating this parameter multiple times, with one user each.
         * @param {string} [containsText] Text, which should be contained in at least one of the following fields of the user task instance:   * subject  * description  * activityId  * id  * processor  * workflowDefinitionId  * workflowInstanceId  Performed filtering is case-insensitive. You must not use this parameter more than once.
         * @param {string} [attributesExampleCustomAttribute] Example of a parameter that filters task instances by the value of the custom task attribute with the ID \&#39;ExampleCustomAttribute\&#39;. You can specify parameters for other attributes in an analogous way. If you specify a parameter several times, the logical operators apply as outlined in the overall description of this API. If custom task attributes with different IDs are present in the URL, only tasks which contain all of them with the values specified will be returned as a response to the request. If a query by custom task attributes matches too many task definitions, you have to limit the query further. Refer, for example, to parameter \&#39;definitionId\&#39;.
         * @param {string} [definitionId] The definition ID of the user task. It consists of the ID of the task defined in the workflow definition (task definition ID) as well as the workflow definition ID delimited by an \&#39;@\&#39; sign. For optimal performance, specify this parameter when searching for tasks by custom task attributes. If the custom task attribute IDs from the query match more than 50 task definitions, you have to specify one or more task definition IDs when searching for tasks by custom task attributes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1TaskInstances: function ($skip, $top, $inlinecount, $expand, $orderby, workflowInstanceId, workflowDefinitionId, processor, id, activityId, description, subject, createdAt, createdFrom, createdUpTo, claimedAt, claimedFrom, claimedUpTo, completedAt, completedFrom, completedUpTo, lastChangedAt, lastChangedFrom, lastChangedUpTo, dueDate, dueDateFrom, dueDateUpTo, priority, status, recipientUsers, recipientGroups, containsText, attributesExampleCustomAttribute, definitionId, options) {
            return exports.UserTaskInstancesApiFp(configuration).getV1TaskInstances($skip, $top, $inlinecount, $expand, $orderby, workflowInstanceId, workflowDefinitionId, processor, id, activityId, description, subject, createdAt, createdFrom, createdUpTo, claimedAt, claimedFrom, claimedUpTo, completedAt, completedFrom, completedUpTo, lastChangedAt, lastChangedFrom, lastChangedUpTo, dueDate, dueDateFrom, dueDateUpTo, priority, status, recipientUsers, recipientGroups, containsText, attributesExampleCustomAttribute, definitionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves the attachments information of a workflow instance via the given user task.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: TASK_GET_ATTACHMENTS
         * @summary Retrieve task instance attachments
         * @param {string} taskInstanceId The ID of the user task via which the attachments information of the corresponding workflow instance should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1TaskInstancesAttachmentsByTaskInstanceId: function (taskInstanceId, options) {
            return exports.UserTaskInstancesApiFp(configuration).getV1TaskInstancesAttachmentsByTaskInstanceId(taskInstanceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves custom task attributes of a user task. Labels as well as the order of the custom task attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Scope: TASK_GET_ATTRIBUTES
         * @summary Retrieve custom task attributes by task instance ID
         * @param {string} taskInstanceId The ID of the user task instance for which the custom task attributes should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1TaskInstancesAttributesByTaskInstanceId: function (taskInstanceId, options) {
            return exports.UserTaskInstancesApiFp(configuration).getV1TaskInstancesAttributesByTaskInstanceId(taskInstanceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * **Warning: Users with the role \"WorkflowAdmin\" are no longer able to view the task context. To allow these users to continue to view the context, assign the role \"WorkflowContextViewer\" to them.**  Retrieves the context of a user task.  Roles permitted to execute this operation:   - Global roles: WorkflowContextViewer, WorkflowContextAdmin  - Instance-specific roles: contextViewerUsers, contextViewerGroups, contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: TASK_GET_CONTEXT
         * @summary Retrieve task context by ID
         * @param {string} taskInstanceId The ID of the user task for which the context should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1TaskInstancesContextByTaskInstanceId: function (taskInstanceId, options) {
            return exports.UserTaskInstancesApiFp(configuration).getV1TaskInstancesContextByTaskInstanceId(taskInstanceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves the form metadata of the given task instance.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin   - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]   - Scope: TASK_GET_FORM
         * @summary Retrieve form metadata of the given task instance.
         * @param {string} taskInstanceId The ID of the user task instance for which the form metadata should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1TaskInstancesFormByTaskInstanceId: function (taskInstanceId, options) {
            return exports.UserTaskInstancesApiFp(configuration).getV1TaskInstancesFormByTaskInstanceId(taskInstanceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves the form model of the given task instance.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin   - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]   - Scope: TASK_GET_FORM_MODEL
         * @summary Retrieve form model of the given task instance.
         * @param {string} taskInstanceId The ID of the user task instance for which the form model should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1TaskInstancesFormModelByTaskInstanceId: function (taskInstanceId, options) {
            return exports.UserTaskInstancesApiFp(configuration).getV1TaskInstancesFormModelByTaskInstanceId(taskInstanceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates a user task\'s status, its properties (for example, subject), and its context with the attributes provided in the request body.    For more information, see SAP Cloud Platform Workflow Service documentation on the  [SAP Help Portal](https://help.sap.com/viewer/e157c391253b4ecd93647bf232d18a83/Cloud/en-US/fe41c54d61fa4710b34f2afe11b5d00e.html).  Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scopes: TASK_COMPLETE, TASK_UPDATE
         * @summary Update task by ID
         * @param {string} taskInstanceId The ID of the user task instance that is to be updated. The ID is 36 characters long.
         * @param {UpdateTaskInstancePayload} updateTaskInstancePayload Specify the request body according to the given schema. The length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateV1TaskInstancesByTaskInstanceId: function (taskInstanceId, updateTaskInstancePayload, options) {
            return exports.UserTaskInstancesApiFp(configuration).updateV1TaskInstancesByTaskInstanceId(taskInstanceId, updateTaskInstancePayload, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.UserTaskInstancesApiFactory = UserTaskInstancesApiFactory;
/**
 * UserTaskInstancesApi - object-oriented interface
 * @export
 * @class UserTaskInstancesApi
 * @extends {BaseAPI}
 */
var UserTaskInstancesApi = /** @class */ (function (_super) {
    __extends(UserTaskInstancesApi, _super);
    function UserTaskInstancesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Retrieves the user task instance with the specified task instance ID.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Scope: TASK_GET
     * @summary Retrieve task by ID
     * @param {string} taskInstanceId The ID of the user task instance which should be retrieved. The ID is 36 characters long.
     * @param {'attributes'} [$expand] You can request custom task attributes to become part of the task output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into task output. Note that labels as well as the order of the custom task attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTaskInstancesApi
     */
    UserTaskInstancesApi.prototype.getInstance = function (taskInstanceId, $expand, options) {
        var _this = this;
        return exports.UserTaskInstancesApiFp(this.configuration).getInstance(taskInstanceId, $expand, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves user task instances by parameters. If no parameters are specified, all instances with status READY, RESERVED, CANCELED, or COMPLETED are returned. Parameters for different attributes of the instance are evaluated using the logical \'and\' operator. If a parameter is specified multiple times, results are matched using the logical \'or\' operator, unless noted otherwise. Empty parameters are treated as if they were not specified. By default, returned tasks are sorted by creation time in ascending order.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin   - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]   - Scope: TASK_GET
     * @summary Retrieve instances by query parameters
     * @param {number} [$skip] The number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. You can use this parameter only once. Refer also to the $top parameter.
     * @param {number} [$top] The number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. You can use this parameter only once. Refer also to the $skip parameter.
     * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the task instances, which match the search criteria, should be returned as a value  of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive. You can use this parameter only once.
     * @param {'attributes'} [$expand] You can request custom task attributes to become part of the task output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into task output. Note that labels as well as the order of the custom task attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present.
     * @param {'claimedAt asc' | 'claimedAt desc' | 'completedAt asc' | 'completedAt desc' | 'createdAt asc' | 'createdAt desc' | 'lastChangedAt asc' | 'lastChangedAt desc' | 'dueDate asc' | 'dueDate desc' | 'subject asc' | 'subject desc' | 'description asc' | 'description desc' | 'activityId asc' | 'activityId desc' | 'id asc' | 'id desc' | 'processor asc' | 'processor desc' | 'workflowDefinitionId asc' | 'workflowDefinitionId desc' | 'workflowInstanceId asc' | 'workflowInstanceId desc' | 'priority asc' | 'priority desc'} [$orderby] The attribute and direction by which tasks are sorted. The sort attribute and direction are separated by a space. The parameter value is case-sensitive. You can only specify one ordering parameter, which contains attribute and direction. To stabilize the order of tasks the implicit second ordering parameter \&#39;createdAt asc\&#39; is applied.   * claimedAt asc - Ascending, task claim time from the oldest to the most recent, tasks with status READY (not yet claimed) first.  * claimedAt desc - Descending, from the most recently claimed tasks to the oldest ones, tasks with status READY (not yet claimed) last.  * completedAt asc - Ascending, task completion or cancelation time from the oldest to the most recent, not yet COMPLETED tasks first.  * completedAt desc - Descending, from the most recently COMPLETED or CANCELED tasks to the oldest ones, not yet COMPLETED tasks last.  * createdAt asc - Ascending, task creation time from the oldest to the most recent.  * createdAt desc - Descending, from the most recently created tasks to the oldest ones.  * lastChangedAt asc - Ascending, task last change time from the oldest to the most recent.  * lastChangedAt desc - Descending, from the most recently changed tasks to the oldest ones.               * dueDate asc - Ascending, tasks due date from the oldest to the most distant in future ones, tasks without due date first.  * dueDate desc - Descending, tasks due date from the most distant in future to the oldest ones, tasks without due date last.  * subject asc - Ascending, from A to Z case-sensitive.  * subject desc - Descending, from Z to A case-sensitive.  * description asc - Ascending, from A to Z case-sensitive, tasks without description first.  * description desc - Descending, from Z to A case-sensitive, tasks without description last.  * activityId asc - Ascending, from A to Z case-sensitive.  * activityId desc - Descending, from Z to A case-sensitive.  * id asc - Ascending, from A to Z case-sensitive.  * id desc - Descending, from Z to A case-sensitive.  * processor asc - Ascending, from A to Z case-sensitive, tasks without processor first.  * processor desc - Descending, from Z to A case-sensitive, tasks without processor last.  * workflowDefinitionId asc - Ascending, from A to Z case-sensitive.  * workflowDefinitionId desc - Descending, from Z to A case-sensitive.  * workflowInstanceId asc - Ascending, from A to Z case-sensitive.  * workflowInstanceId desc - Descending, from Z to A case-sensitive.  * priority asc - Ascending, tasks priority from lowest to highest.  * priority desc - Descending, tasks priority from highest to lowest.
     * @param {string} [workflowInstanceId] The workflow instance ID for which the user task instances are returned. The workflow instance ID is 36 characters long.
     * @param {string} [workflowDefinitionId] The workflow definition ID for which the user task instances are returned.
     * @param {string} [processor] The processor of the user task instance.
     * @param {string} [id] The unique ID of the user task instance. The user task instance ID is 36 characters long.
     * @param {string} [activityId] The activityId of the user task instance. This field represents the ID of the user task definition.
     * @param {string} [description] The description of the user task instance in UTF-8 encoding. You must not specify texts that contain commas with this parameter.
     * @param {string} [subject] The subject of the user task instance in UTF-8 encoding. You must not specify texts that contain commas with this parameter.
     * @param {string} [createdAt] Time when the user task instance has been created. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;createdFrom\&#39; and \&#39;createdUpTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
     * @param {string} [createdFrom] The start time (inclusive) of the time range when the user task instance was created. Must be less or equal to the value of the \&#39;createdUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;createdAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
     * @param {string} [createdUpTo] The end time (inclusive) of the time range when the user task instance was created. Must be greater or equal to the value of the \&#39;createdFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;createdAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
     * @param {string} [claimedAt] Time when the user task instance was claimed. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;claimedFrom\&#39; and \&#39;claimedUpTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
     * @param {string} [claimedFrom] The start time (inclusive) of the time range when the user task instance was claimed. Must be less or equal to the value of the \&#39;claimedUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;claimedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
     * @param {string} [claimedUpTo] The end time (inclusive) of the time range when the user task instance was claimed. Must be greater or equal to the value of the \&#39;claimedFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;claimedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
     * @param {string} [completedAt] Time when the user task instance was COMPLETED or CANCELED. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;completedFrom\&#39; and \&#39;completedUpTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
     * @param {string} [completedFrom] The start time (inclusive) of the time range when the user task instance was COMPLETED or CANCELED. Must be less or equal to the value of the \&#39;completedUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;completedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
     * @param {string} [completedUpTo] The end time (inclusive) of the time range when the user task instance was COMPLETED or CANCELED. Must be greater or equal to the value of the \&#39;completedFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;completedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
     * @param {string} [lastChangedAt] Time when the user task instance has been changed for the last time. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;lastChangedFrom\&#39; and \&#39;lastChangedTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
     * @param {string} [lastChangedFrom] The start time (inclusive) of the time range when the user task instance was changed for the last time. Must be less or equal to the value of the \&#39;lastChangedUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;lastChangedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
     * @param {string} [lastChangedUpTo] The end time (inclusive) of the time range when the user task instance was changed for the last time. Must be greater or equal to the value of the \&#39;lastChangedFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;lastChangedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
     * @param {string} [dueDate] The due date of the user task instance. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;dueDateFrom\&#39; and \&#39;dueDateUpTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
     * @param {string} [dueDateFrom] The start time (inclusive) of the due date time range for the user task instance. Must be less or equal to the value of the \&#39;dueDateUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;dueDate\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
     * @param {string} [dueDateUpTo] The end time (inclusive) of the due date time range for the user task instance. Must be greater or equal to the \&#39;dueDateFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;dueDate\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS
     * @param {'LOW' | 'MEDIUM' | 'HIGH' | 'VERY_HIGH'} [priority] The priority of the user task instance. The values are case-insensitive.
     * @param {'READY' | 'RESERVED' | 'COMPLETED' | 'CANCELED'} [status] The status of the user task instance. The values are case-insensitive.
     * @param {string} [recipientUsers] The users who must be among the recipient users of the user task instance. A user task instance has to match at least one of the recipient users specified. Specify the users by repeating this parameter multiple times, with one user each.
     * @param {string} [recipientGroups] The groups which must be among the recipient groups of the user task instance. A user task instance has to match at least one of the recipient groups specified. Specify the groups by repeating this parameter multiple times, with one user each.
     * @param {string} [containsText] Text, which should be contained in at least one of the following fields of the user task instance:   * subject  * description  * activityId  * id  * processor  * workflowDefinitionId  * workflowInstanceId  Performed filtering is case-insensitive. You must not use this parameter more than once.
     * @param {string} [attributesExampleCustomAttribute] Example of a parameter that filters task instances by the value of the custom task attribute with the ID \&#39;ExampleCustomAttribute\&#39;. You can specify parameters for other attributes in an analogous way. If you specify a parameter several times, the logical operators apply as outlined in the overall description of this API. If custom task attributes with different IDs are present in the URL, only tasks which contain all of them with the values specified will be returned as a response to the request. If a query by custom task attributes matches too many task definitions, you have to limit the query further. Refer, for example, to parameter \&#39;definitionId\&#39;.
     * @param {string} [definitionId] The definition ID of the user task. It consists of the ID of the task defined in the workflow definition (task definition ID) as well as the workflow definition ID delimited by an \&#39;@\&#39; sign. For optimal performance, specify this parameter when searching for tasks by custom task attributes. If the custom task attribute IDs from the query match more than 50 task definitions, you have to specify one or more task definition IDs when searching for tasks by custom task attributes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTaskInstancesApi
     */
    UserTaskInstancesApi.prototype.getV1TaskInstances = function ($skip, $top, $inlinecount, $expand, $orderby, workflowInstanceId, workflowDefinitionId, processor, id, activityId, description, subject, createdAt, createdFrom, createdUpTo, claimedAt, claimedFrom, claimedUpTo, completedAt, completedFrom, completedUpTo, lastChangedAt, lastChangedFrom, lastChangedUpTo, dueDate, dueDateFrom, dueDateUpTo, priority, status, recipientUsers, recipientGroups, containsText, attributesExampleCustomAttribute, definitionId, options) {
        var _this = this;
        return exports.UserTaskInstancesApiFp(this.configuration).getV1TaskInstances($skip, $top, $inlinecount, $expand, $orderby, workflowInstanceId, workflowDefinitionId, processor, id, activityId, description, subject, createdAt, createdFrom, createdUpTo, claimedAt, claimedFrom, claimedUpTo, completedAt, completedFrom, completedUpTo, lastChangedAt, lastChangedFrom, lastChangedUpTo, dueDate, dueDateFrom, dueDateUpTo, priority, status, recipientUsers, recipientGroups, containsText, attributesExampleCustomAttribute, definitionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves the attachments information of a workflow instance via the given user task.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: TASK_GET_ATTACHMENTS
     * @summary Retrieve task instance attachments
     * @param {string} taskInstanceId The ID of the user task via which the attachments information of the corresponding workflow instance should be retrieved. The ID is 36 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTaskInstancesApi
     */
    UserTaskInstancesApi.prototype.getV1TaskInstancesAttachmentsByTaskInstanceId = function (taskInstanceId, options) {
        var _this = this;
        return exports.UserTaskInstancesApiFp(this.configuration).getV1TaskInstancesAttachmentsByTaskInstanceId(taskInstanceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves custom task attributes of a user task. Labels as well as the order of the custom task attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Scope: TASK_GET_ATTRIBUTES
     * @summary Retrieve custom task attributes by task instance ID
     * @param {string} taskInstanceId The ID of the user task instance for which the custom task attributes should be retrieved. The ID is 36 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTaskInstancesApi
     */
    UserTaskInstancesApi.prototype.getV1TaskInstancesAttributesByTaskInstanceId = function (taskInstanceId, options) {
        var _this = this;
        return exports.UserTaskInstancesApiFp(this.configuration).getV1TaskInstancesAttributesByTaskInstanceId(taskInstanceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * **Warning: Users with the role \"WorkflowAdmin\" are no longer able to view the task context. To allow these users to continue to view the context, assign the role \"WorkflowContextViewer\" to them.**  Retrieves the context of a user task.  Roles permitted to execute this operation:   - Global roles: WorkflowContextViewer, WorkflowContextAdmin  - Instance-specific roles: contextViewerUsers, contextViewerGroups, contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: TASK_GET_CONTEXT
     * @summary Retrieve task context by ID
     * @param {string} taskInstanceId The ID of the user task for which the context should be retrieved. The ID is 36 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTaskInstancesApi
     */
    UserTaskInstancesApi.prototype.getV1TaskInstancesContextByTaskInstanceId = function (taskInstanceId, options) {
        var _this = this;
        return exports.UserTaskInstancesApiFp(this.configuration).getV1TaskInstancesContextByTaskInstanceId(taskInstanceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves the form metadata of the given task instance.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin   - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]   - Scope: TASK_GET_FORM
     * @summary Retrieve form metadata of the given task instance.
     * @param {string} taskInstanceId The ID of the user task instance for which the form metadata should be retrieved. The ID is 36 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTaskInstancesApi
     */
    UserTaskInstancesApi.prototype.getV1TaskInstancesFormByTaskInstanceId = function (taskInstanceId, options) {
        var _this = this;
        return exports.UserTaskInstancesApiFp(this.configuration).getV1TaskInstancesFormByTaskInstanceId(taskInstanceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves the form model of the given task instance.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin   - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]   - Scope: TASK_GET_FORM_MODEL
     * @summary Retrieve form model of the given task instance.
     * @param {string} taskInstanceId The ID of the user task instance for which the form model should be retrieved. The ID is 36 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTaskInstancesApi
     */
    UserTaskInstancesApi.prototype.getV1TaskInstancesFormModelByTaskInstanceId = function (taskInstanceId, options) {
        var _this = this;
        return exports.UserTaskInstancesApiFp(this.configuration).getV1TaskInstancesFormModelByTaskInstanceId(taskInstanceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates a user task\'s status, its properties (for example, subject), and its context with the attributes provided in the request body.    For more information, see SAP Cloud Platform Workflow Service documentation on the  [SAP Help Portal](https://help.sap.com/viewer/e157c391253b4ecd93647bf232d18a83/Cloud/en-US/fe41c54d61fa4710b34f2afe11b5d00e.html).  Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scopes: TASK_COMPLETE, TASK_UPDATE
     * @summary Update task by ID
     * @param {string} taskInstanceId The ID of the user task instance that is to be updated. The ID is 36 characters long.
     * @param {UpdateTaskInstancePayload} updateTaskInstancePayload Specify the request body according to the given schema. The length of the request body is limited to ensure optimal operation of the service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTaskInstancesApi
     */
    UserTaskInstancesApi.prototype.updateV1TaskInstancesByTaskInstanceId = function (taskInstanceId, updateTaskInstancePayload, options) {
        var _this = this;
        return exports.UserTaskInstancesApiFp(this.configuration).updateV1TaskInstancesByTaskInstanceId(taskInstanceId, updateTaskInstancePayload, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return UserTaskInstancesApi;
}(base_1.BaseAPI));
exports.UserTaskInstancesApi = UserTaskInstancesApi;
//# sourceMappingURL=user-task-instances-api.js.map